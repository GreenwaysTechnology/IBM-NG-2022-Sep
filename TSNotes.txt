				Angular 

Pre Knowledge

1.HTML 5
2.CSS 3
3.Javascript - ES 6

Lab setup:

1.node.js
2.vs code
.....................................................................................

Angular :

1.Typescript
2.Reactive Programming using rxjs
3.Angular 

...................................................................................
				Typescript
.................................................................................

What is typescript?
   Type script is the programming language to build object oriented java script applications.
   Angular apps are written using type script.

What is difference between java script and typescript?

What is javascript?
  Java script is also programming language.
 Javascript is object based, functional style programming language.

Pl :
  - classified based on type system

1.strongly/static  typed pl
  -the type of variable is known /verified during compile time -  java,c++
 int a =10
 a="hello"
2.weakly/dynamic typed pl
  - the type of variable is known at runtime only- type of variable can be changed during runtime.
 eg: js

 var | let | const variableName =value

  let a =10;
  a="Hello" //valid

Object Oriented Principles:
...........................

1.Abstraction
2.Encapsulation
3.Hierarchy
4.Typing
5.Modularity
----------------------
6.Concurrency
7.Persistency

if any language follows the first 5 prinicples 100% , those languages are called object oriented programming.

java script does not follow the first 5 principles , so it is called as object based languge.


		JavaScript is not object oriented
		Javascript  is not strongly typed 


Drawbacks of dynamic typing:
    -We cant build enterprise consistent application.

-Object based 
    if we  want to design , object oriented system in js not possible.
...................................................................................

Why javascript was created?

  Javascript was created for process html pages.

1989 - Web Project was started   

1990 -  The first webserver,Browser was created

1994 - Netscap started

1995 - The first netscap navigator came to access web pages 

1996 - Netscap decided to put java inside web browser.

Netscap decided to build client side web technoloy- once html is rendered into web browser

how to change that html on fly. 

Netscap decided to create a new programming language, who recurited Brendan Eich
,the programmer , asked to create new programming language for netscap navigator.

-Objective of Project

-It should be like java but it should not be java -light weight - scripting
-deadline is 10 days.

Time line:

1.javascript project started 1995
1.first name of the language was "Mocha"
2.language was renamed to "Live Script" -1996
3.language was renamed to "java Script" -1996
............................................................................................
				 ECMA
...................................................................................

Ecma International is an industry association dedicated to the standardization of information and communication systems.

After language ready, which was submitted to standard body "ECMA international"

1996---1997 : JS 1.0 =>ES 1.0

1997- 1998 :  ES 2.0: It did not come

1999 :  ES 3

2007 : ES 4

2008 : ES 5
.....

2012-2015 : ES 6
........
2016  ONWARDS : es 7,es 8, ............

..............................................................................................
			2008 - Introduction of  Node.js : Enter prise Javascript
..............................................................................................
in order to build enterprise javascript apps, community started thinking about "Object oriented Models".
                      How to introduce object oriented features into language.
..............................................................................................
Fundamentally js is object based,type less language, then it is difficult to build object oriented systems.

in order to create better javascript, 2009, The project was started to make javascript looks like other object oriented langugages.
 
 - classes,interfaces,modules.... : Coffee script (intension was to introduce object oriented features like classes,interfaces).


YOu write code in coffeescript

Employee.coffee

class Employee {

}
compiler - coffee Employee.coffee
|
Employee.js - compiled code -pure javascript 
|
run on browser

Coffee script had issues still - Type system- No strongly typed.


2010, Microsoft started project to create "object oriented javascript" using C#

Objective of MS Project:

 -Add Type System - Strong Typing
 -Classes
 -Modules
 -interfaces
 -encapulation keywords
 .......
C# ---compiler------plain javascript.

MS Failed to port this project to public because

Problems with C#
 1.PORTABLITY.
 2.COMPLEXITY
..............................................................................................

2012 - ECMA released new javascript spec (ES 6) in which They introduced
  
   - classes
   - let 
   - const
   - advanced object literals
   - Promises
  etc..........

MS decided to rewrite Typed Javascript project based "ECMA 6 Standards".

MS Started redesigning the whole project, target ecma 6 as base language.

{ES 6 + Static Typing + added new extra fetures} => The brith of Typescript.


Arch of TS:

					
				      TS language
					    |
					  ES 6
					    |
					  ES 5


Typescript----compile----Plain javascript

Typescript is strongly typed, object oriented  javascript.

Now you can use type script to build better object oriented systems using javascript.

TS is not compititor or replacer for javascript but it complements js.

/////////////////////////////////////////////////////////////////////////////////////////

Type script is a typed superset of javascript that compiles to plain javascript

                  any browser,any host, any os, any device

/////////////////////////////////////////////////////////////////////////////////////
				Setup Ts project

Lab:

Create Ts Project.
How to write ts programs
How to compile ts programs
How to run compiled ts programs

How to save file Name?

fileName.ts
 index.ts

E:\session\upgrad> mkdir ts-apps

2.go to ts-apps folder


E:\session\upgrad>cd ts-apps

E:\session\upgrad\ts-apps>

3.create package.json file


E:\session\upgrad\ts-apps> npm init -y

4.create src folder 

E:\session\upgrad\ts-apps>  mkdir src 

5.install typescript compiler

 npm install typescript --save-dev

6.lanuch ide 
E:\session\upgrad\ts-apps>  code .

7.open package.json file and look inside scripts section and add this entry
 "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "compile" : "tsc"
  }

9.tsconfig.json file  : used to configure compiler parameters
{
    "compilerOptions": {
        "outDir": "build",
        "watch": true,
        "target": "ES6",
        "noEmitOnError": true
    },
    "exclude": [
        "node_modules"
    ],
    "files": [
        "src/index.ts"
    ]
}


10.test inside browser

Create html file inside project dir

ts-apps

 -index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Typescript-App</title>
</head>
<body>
    <h1>Typescript app</h1>
    <script src="src/index.ts"></script>
</body>
</html>

Here we need to test whether it is working or not

in order to test this , you need to install live server. which is embeded webserver for vs code.

11.compile ts code 

open cmd prompt and go to the project location

E:\session\IBM\2022\may\ng-session\ts-apps> npm run compile

12.After compilation, you can see the folder in side project dir and file called index.js

13. include that index.js inside index.html
<body>
    <h1>Typescript app</h1>
    <script src="build/index.js"></script>
</body>
.....................................................................................

.....................................................................................	              	 Typescript language fundamentals


How to declare variables and how to use data types?

Java script is dynamic and weakly typed language, data types are not necessary during declaration


var or let or const variableName:datatype = value(literals)

Types :
 number
 string
 boolean
 ..
reference types
array  

other types;
 void
 undefined
 any
 unknown
 function
 enum



eg:

//declare variables :

//string - "" ,'',``(backtick)
let firstName: string = "Subramanian"
let lastName: string = 'Murugan'
//concatnation : +
console.log("Name " + firstName + lastName)
//concatnation : ,
console.log("Name ", firstName, lastName)
//using back tick and tempatle literal syntax `${variableName}` - pure es 6 syntax
console.log(`Name ${firstName}    ${lastName}`)
//use case of backtick notation.
//multi line strings - in old javascript
let doc: string = "<html>" +
    "<head>" +
    "<title>Hello</title" +
    "</head>"

console.log(doc)
//multi line strings using backtick notation.
let title: string = 'Angular in Action'
let newDoc: string = `
  <html>
    <head>
       <title>IBM Home Page </title>
   </head>
   <body>
         <p>${title}</p>
   </body>
   </html>
`
console.log(newDoc)


//numbers
let qty: number = 100
let price: number = 9000
let totalPrice = qty * price
console.log(`Total Price ${totalPrice}`)
...............................................................................
//boolean
let isActive:boolean = true 
let isEnabled:boolean =false 

console.log(`isActive ${isActive}  is Enabled ${isEnabled}`)
...................................................................................
			 undefined

Variable is declared but no value is assigned.

//
let salary:undefined;
console.log(`Salary ${salary}`)

let a;
 a => undefined
a=10

let b:undefined =undefined


...................................................................................
			Compile time errors
....................................................................................


let a: number = 100
console.log(` A is ${a}`)

//reinitalization
a =900
console.log(` A is ${a}`)

//assign wrong type...
/**
 * src/index.ts:10:1 - error TS2322: Type 'string' is not assignable to type 'number'.

10 a="Hello"
   ~

 */
a="Hello"

console.log(` A is ${a}`)

By default type script compiler generates compile time error,still you will get output.

what if i dont want to run the program if there is error.

tsconfig.json
{
    "compilerOptions": {
        "outDir": "build",
        "watch": true,
        "noEmitOnError": true
    },
    "exclude": [
        "node_modules"
    ],
    "files": [
        "src/index.ts"
    ]
}

"noEmitOnError": true

Type inference:
//without type can we variable

//Type inference : without expclit variable declaration, we can declare variable
//type of variable is dermineded once the value is assinged, in future assigment, based on the value type, will be taken
let firstName = 'Subramanian'
console.log(firstName)
firstName = 'foo'
//firstName =200

//type inference and undefined

//here no value and no explicit type
//undefined and type interference
let myvar;
console.log(myvar)
myvar =100;
console.log(myvar)
myvar ="Hello"
console.log(myvar)


any:
 if variable is declared without any explicit type. you can use any 
 which is recommended

//any the variable can  hold any type of value
let myvar:any;
console.log(myvar)
myvar =100;
console.log(myvar)
myvar ="Hello"
console.log(myvar)
.....................................................................................
  				   null

null:
.....
 It is similar to undefined. No valid literal is assigned. No valid Object literal is assigned.
null itself object , but no value is present.

In javascript apps, null means that variable is going to hold object in future assignements.



Literals:

1.number
2.string
3.boolean
4.undefined
5.NaN
6.infinity
7.null
8.function
9.object

NaN:
//NaN - Not a number ; it is one of the runtime error.
//NaN you will get when a variable is having undefined , if you do computation- numerical computation

let a = 10;
let b;
let c = a * b;
console.log(`a ${a} b ${b} c ${c} `)


infinity:
 div/0
//infinity
let a =100;
let b =0
let c = a / b 
console.log(`c ${c}`)
.....................................................................................
				Advanced boolean


in js (ts) is every thing true, execept the following values

1.boolean false
2.0
3.empty string
4.undefined
5.NaN
6.null

//
let myvar: undefined

if (myvar) {
    console.log('valid')
} else {
    console.log('invalid')
}

let b
let a = 100 * b
console.log(a)
if (a) {
    console.log('valid')
} else {
    console.log('invalid')
}

let start = 0;
if (start) {
    console.log('valid')
} else {
    console.log('invalid')
}

let foo = null
if (start) {
    console.log('valid')
} else {
    console.log('invalid')
}
.....................................................................................
				functions
.....................................................................................
//functions

function sayHello() {
    console.log('Hello')
}
sayHello()

//functions with args and parameter

function add(a: number, b: number) {
    let c = a + b
    console.log(c)
}
add(10, 10)
//add("hello", "subramanian")

//return value
function addV1(a: number, b: number): number {
    let c = a + b
    //console.log(c)
    return c
}
addV1(10, 10)

//what if i dont supply value: default value or optional operator

//default args : es 6 feature
function multiply(a: number = 0, b: number = 0):number {
    return a * b
}
console.log(multiply(10, 10))
console.log(multiply())

//optional parameter : no values are supplied but still we can skip
function div(a?: number, b?: number):number {
     return a / b  
}
console.log(div(10, 10))
console.log(div())

.....................................................................................
//function as literal : function can be stored into a variable, that variable can be used to invoke that function.

//es 5 style of function literal

let sayHai = function (name = 'subramanian') {
    return `Hello ${name}`
}
console.log(sayHai())

//es 6 style of function literal - arrow functions

let add = (a: number = 0, b: number = 0): number => {
    return a * b
}

console.log(add(12, 56))

//if function having only return statement: remove return and {}
add = (a: number = 0, b: number = 0): number => a * b
console.log(add(12, 56))
.....................................................................................
			  	Union Type
.....................................................................................

A variable can hold more than one data type.

let  a : number | string 

a=100
a="100"

a =true -false

//union type

let myvar: number | string;
myvar = 100;
myvar = "900"
// myvar =true

let gender: "Male" | "Female" | "Third"

gender = "Male"
gender = "Female"
//gender="foo"

let windowStatus: "Open" | "Close"
windowStatus = "Open"
function Mode(varient: "dark" | "light") {
    console.log(varient)
}
Mode("dark")
Mode("light")
// Mode("theme")

function Person(gender: "Male" | "Female" | "Third" | undefined, active: true | false) {
    console.log(gender, active)
}
Person("Female", true)
Person("Male", false)

// function PrintId(id: string | number | undefined) {
//     console.log(id)
// }
// PrintId("1");
// PrintId(1);
// PrintId(undefined)

function PrintId(id: string | number | undefined) {
    //console.log(id.toUpperCase())
    if (typeof id === "string") {
        // In this branch, id is of type 'string'
        console.log(id.toUpperCase());
    } else if (typeof id === "number") {
        // Here, id is of type 'number'
        console.log(id.toFixed());
    } else {
        console.log(id)
    }
}
PrintId("abc");
PrintId(1);
PrintId(undefined)
.....................................................................................
                    .............................................................................................
				Object oriented Programming In TS
.....................................................................................
class declaration
  instance variables , methods
  constructors and parameters
  create instance


simple class declartion:
//class declaration

class Employee {
    //variables: instance variables
    id: number = 1
    name: string = "subramanian"
    status: boolean = true

    //methods:instance methods
    calculate(value: number=0): number {
        return 100 * value
    }
}
//emp is reference variable
//new is operator
//Employee() is constructor call
let emp = new Employee();
console.log(`id ${emp.id} name ${emp.name} Status ${emp.status} value ${emp.calculate(12)}`)


....

//state initalization
/**
 * 1.inside class
 * 2.outside class using reference variable
 * 3.via constructor
 */

//inside class
class Employee {
    //variables: instance variables
    id: number = 1
    name: string = "subramanian"
    status: boolean = true

    //methods:instance methods
    calculate(value: number=0): number {
        return 100 * value
    }
}
//emp is reference variable
//new is operator
//Employee() is constructor call
let emp = new Employee();
console.log(`id ${emp.id} name ${emp.name} Status ${emp.status} value ${emp.calculate(12)}`)

.....

//state initalization
/**
 * 1.inside class
 * 2.outside class using reference variable
 * 3.via constructor
 */

//inside class
class Employee {
    //variables: instance variables
    id: number = 1
    name: string = "subramanian"
    status: boolean = true

    //methods:instance methods
    calculate(value: number=0): number {
        return 100 * value
    }
}
//emp is reference variable
//new is operator
//Employee() is constructor call
let emp = new Employee();
//state init
emp.id =900;
emp.name ='ram'
console.log(`id ${emp.id} name ${emp.name} Status ${emp.status} value ${emp.calculate(12)}`)
................
constructor - initalization
//state initalization
/**
 * 1.inside class
 * 2.outside class using reference variable
 * 3.via constructor
 */

//inside class
class Employee {
    //variables: instance variables
    id: number
    name: string
    status: boolean

    //constructor args :which can be default or optional
    constructor(id: number = 1, name: string = 'subramaian', status: boolean = false) {
        this.id = id;
        this.name = name;
        this.status = status
    }

    //methods:instance methods
    calculate(value: number = 0): number {
        return 100 * value
    }
}
//emp is reference variable
//new is operator
//Employee() is constructor call
let emp = new Employee();
//state init
emp.id = 900;
emp.name = 'ram'
console.log(`id ${emp.id} name ${emp.name} Status ${emp.status} value ${emp.calculate(12)}`)
.....................................................................................
//state initalization
/**
 * 1.inside class
 * 2.outside class using reference variable
 * 3.via constructor
 */

//inside class
class Employee {
    //variables: instance variables
    id: number
    name: string
    status: boolean

    //constructor args :which can be default or optional
    constructor(id: number = 1, name: string = 'subramaian', status: boolean = false) {
        this.id = id;
        this.name = name;
        this.status = status
    }

    //methods:instance methods
    calculate(value: number = 0): number {
        return 100 * value
    }
}
//emp is reference variable
//new is operator
//Employee() is constructor call
let emp = new Employee();
console.log(`id ${emp.id} name ${emp.name} Status ${emp.status} value ${emp.calculate(12)}`)

emp = new Employee(34,'karthik',true);

console.log(`id ${emp.id} name ${emp.name} Status ${emp.status} value ${emp.calculate(12)}`)
.....................................................................................
				Dependency injection: Constructor args
.....................................................................................

Hiearchy :
 HAS-A hiearchy - dependency injection.
 IS-A hierachy -  inheritance


HAS-A :
//classes are depending on each other 

class EmployeeService {
    constructor() {

    }
    findAll(): string {
        return 'Employee Service'
    }
    save(emplyee: string) {
        console.log(emplyee)
        return 'saved'
    }
}

class EmployeeController {
    //type of empService is EmployeeService
    //has-a /dependency
    empService: EmployeeService
    constructor(empService: EmployeeService) {
        this.empService = empService
    }

    findAll() {
        return this.empService.findAll()
    }
}

//link objects

let empService = new EmployeeService()
//constructor injector
let empCtrl = new EmployeeController(empService)

console.log(empCtrl.findAll())

//constructor injector
let empCtrl1 = new EmployeeController(new EmployeeService())
console.log(empCtrl1.findAll())
....................................................................................					Inheritance

1.class inheritance - es 6 feature
2.interface inheritance -ts feature
3.abstract class inheritance -ts feature


class based inheritance:
//base class

class Account {
    constructor(){
        console.log('Account class')
    }
}
class SavingsAccount extends Account{
    constructor(){
        super()
        console.log('SavingsAccount class')
    }
}
let sb = new SavingsAccount()

.....
//base class

class Account {
    constructor(){
        console.log('Account class')
    }
    //
    deposit(){
        return 10
    }
}
class SavingsAccount extends Account{
    constructor(){
        super()
        console.log('SavingsAccount class')
    }
    //overriding
    deposit(){
        return 110 * super.deposit()
    }
}
let sb = new SavingsAccount()
console.log(sb.deposit())
....................................................................................
			  interfaces

1.inspired from java,c# - to have common behaviours for different class heriachy

//interface

interface Fly {
    fly(): string
}
class Airplane implements Fly {
    fly(): string {
        return "AirPlane"
    }
}

let airPlane= new Airplane()
console.log(airPlane.fly())
................................................................................
			 Abstract class
..................................................................................

//abstract class 

abstract class Animal {
    abstract eat(): string
    saveAnimals(): void {
        console.log('Save animals from the hunter')
    }
}
class Tiger extends Animal {
    eat(): string {
        return 'tiger hunts other animals'
    }
}
let tiger = new Tiger()
console.log(tiger.eat())
tiger.saveAnimals()
....................................................................................
			   Encapsultion
.....................................................................................

This is supported by ts 

private,public,protected

private within class
public outside class - default behaviour
protected - base and dervied class.


private:
//private instance variables and methods

class Secret {
    private password:string ='Abc123'

    private generatePassword():string {
        return this.password + Math.random()
    }
}
let auth = new Secret()
// console.log(auth.password)
//  console.log(auth.generatePassword())


public :

class Employee {
    //by default public
    public id: number = 10

    public calculate(): number {
        return 100
    }

}

let emp = new Employee()
console.log(emp.id, emp.calculate())
.....................................................................................

				Variables Types

1.instance variable
  variable declared inside class
2.static variables
  variables delcared inside class with static modifier
3.local variables
  variables are declared inside method(including constructor)
  or method args / constructor args


1.instance variables:

class Employee {
 public | private | protected id:number; //instance variable
}
variables are declared inside class


2.static variables



//static variables
class ErrorMessage {
    static SERVER_ERROR:string = 'Server error';
    static INVALID_TOKEN = 'Token is invalid';
    static TOKEN_NOTFOUND = 'Token Not supplied';
}

//read static variables
console.log(ErrorMessage.SERVER_ERROR)
console.log(ErrorMessage.INVALID_TOKEN)
console.log(ErrorMessage.TOKEN_NOTFOUND)





3.local variables
 variables are declared inside method(including constructor)
  or method args / constructor args.
var| let | const 

 class Demo { 

   //
    constructor(myvar:string){}
    doStuff(){
      let a=10;//local variables
    }
    sayHai(name:string="hello" //localvariable){

    }
 }
..................................................................................
			public and private keywords
			  for code reduction


// class Customer {
//     //instance variables
//     public id: number
//     public name: string
//     public status: boolean
//     //constructor args are local variables
//     constructor(id: number = 1, name: string = '', status: boolean = false) {
//         this.id = id
//         this.name = name
//         this.status = status
//     }
// }


// class Customer {
//     //instance variables
//     id: number
//     name: string
//     status: boolean
//     //constructor args are local variables
//     constructor(id: number = 1, name: string = '', status: boolean = false) {
//         this.id = id
//         this.name = name
//         this.status = status
//     }
// }

//reduce code by removing instance variables from the class declaration
//we have to convert local variables(constructor args) into instance variables
//we can convert constructor args variables into instance variable by adding "private or public keyword"
// class Customer {
//     //constructor args are local variables
//     constructor(public id: number = 1, public name: string = '', public status: boolean = false) {
//         this.id = id
//         this.name = name
//         this.status = status
//     }
// }

//remove variable initalization code inside constructor because variables left side and right side both are same.
class Customer {
    //constructor args are local variables
    constructor(public id: number = 1, public name: string = '', public status: boolean = false) { }
}

let cust = new Customer(12, 'Subramanian', true)
console.log(cust)
..........................**************............................................
			Dependency injection and private ,public keywords
...................................................................................


class Logger {
    constructor() {

    }
    log(message: string) {
        console.log(message)
    }
}

class UserService {
    constructor(private logger: Logger) { }
    findAll() {
        this.logger.log('fetch users')
        return 'Users'
    }
}
class UserController {
    // private userService: UserService
    constructor(private userService: UserService) {// this.userService = userService
    }
    init() {
        console.log(this.userService.findAll())
    }
}
let usrCtrl = new UserController(new UserService(new Logger()))
usrCtrl.init()

..................................................................................
				 Object types
...............................................................................

1.class as type
2.interface as type
3.type keyword as type

For literal objects, how to enforce type safty for literal objects.

//class as type 

class Product {
    //required fields and optional fields
    id: number
    //optional properties
    name?: string
    qty?: number
    inStock?: boolean
    category?: "Food" | "Electronics" | "Others"

}

//literal objects
// let product: Product = {
//     id: "1,",
//     name: 'Phone',
//     qty: 100,
//     inStock: true
// }
let product: Product = {
    id: 1,
    name: 'Phone',
    qty: 100,
    inStock: true
}
//here we have only two properties, still ts compiler gives error, ts compiler looks all properties from the type class must present in the object defintion
let newProduct: Product = {
    id: 1,
    inStock: false,
    category:"Electronics"
}

interface as type

//class as type 

interface Product {
    //required fields and optional fields
    id: number
    //optional properties
    name?: string
    qty?: number
    inStock?: boolean
    category?: "Food" | "Electronics" | "Others"

}

let product: Product = {
    id: 1,
    name: 'Phone',
    qty: 100,
    inStock: true
}
//here we have only two properties, still ts compiler gives error, ts compiler looks all properties from the type class must present in the object defintion
let newProduct: Product = {
    id: 1,
    inStock: false,
    category:"Electronics"
}
.....................................................................................
//type as type 

type Product = {
    //required fields and optional fields
    id: number
    //optional properties
    name?: string
    qty?: number
    inStock?: boolean
    category?: "Food" | "Electronics" | "Others"

}

let product: Product = {
    id: 1,
    name: 'Phone',
    qty: 100,
    inStock: true
}
//here we have only two properties, still ts compiler gives error, ts compiler looks all properties from the type class must present in the object defintion
let newProduct: Product = {
    id: 1,
    inStock: false,
    category: "Electronics"
}
.....................................................................................
				 Generics
What is generics?
  To restict to have similar or same type of value inside container objects like array,Promise,Observable....

//arrays
//without type
let list = [1, "hello", true]
//with type:syntax-1
let numList: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
console.log(numList)
//with type:syntax-2 : generics syntax
let numList2: Array<number> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

//functions return array
function getList(): Array<number> {
    return [1, 2, 3, 4, 5, 6]
}
function getNumList(): number[] {
    return [1, 2, 3, 4, 5, 6]
}
//array of Employees
class Employee {
    id: number
    name: string
}

let employees: Array<Employee> = [{
    id: 1,
    name: 'a'
}]
.....................................................................................
enum Direction {
    Up,
    Down,
    Left,
    Right,
}
console.log(Direction.Up)
console.log(Direction.Down)

enum UserResponse {
    No = 0,
    Yes = 1,
}
function respond(recipient: string, message: UserResponse): void {
    console.log(recipient, message)
}

respond("Princess Caroline", UserResponse.No);
...................&&&&&&&&&&&&&&&&&&&...............................................

annotations: @annotation , @Override,@Entity,@Controller

-meta programming : isloate the code logic from main program to ouside, when you 
req, you inject those features , into code during runtime.

Decorators are experimental feature in es7. but ts added this language with experimental mode.

What is decorator ?

 It is simple javascript function.


Steps

1.declare decorator function
 It is regular javascript function with some syntax.
2.Use decorator
 @Decorator
		
Types of decorator:
1.class level decorator
2.field level decorator
3.method level decorator

Angular provides lot of built in decorators,here we explore how to use those decorators and how it has been written.

Step 0: 
tsconfig.json
{
    "compilerOptions": {
        "outDir": "build",
        "watch": true,
        "noEmitOnError": true,
        "emitDecoratorMetadata": true,
        "experimentalDecorators": true
    },
    "exclude": [
        "node_modules"
    ],
    "files": [
        "src/index.ts"
    ]
}

Step 1:
 Declare decorator function and write decorator logic

Step 2:
 Use/inject decorators on to class,field,method....


//Decorator:

function Course(target: any) {
    //decorator logic
    //inject course information
    Object.defineProperty(target.prototype, 'subject', { value: 'Typescript' })
}

@Course
class Student {
    constructor(public name: string = '') { }
}
let student = new Student('Subramanian') as any
console.log(`${student.name} is learning ${student.subject}`)
.....................................................................................

Decorators with Parameter:
//Decorator:

// function Course(target: any) {
//     //decorator logic
//     //inject course information
//     Object.defineProperty(target.prototype, 'subject', { value: 'Typescript' })
// }

// function Course(courseInfo: any) {
//     return function (target: any) {
//         Object.defineProperty(target.prototype, 'subject', { value: courseInfo })
//     }
// }

// @Course('Angular with Java')
// class Student {
//     constructor(public name: string = '') { }
// }
// let student = new Student('Subramanian') as any
// console.log(`${student.name} is learning ${student.subject}`)

function Course(courseInfo: any) {
    return function (target: any) {
        Object.defineProperty(target.prototype, 'courseInfo', { value: courseInfo })
    }
}

@Course({ name: 'Angular with java', duration: '40 hrs', instructor: 'Subramanian' })
class Student {
    constructor(public name: string = '') { }
}
let student = new Student('Ram') as any
console.log(`${student.name} is learning ${student.courseInfo.name} ${student.courseInfo.duration} ${student.courseInfo.instructor}`)
.....................................................................................
		..............................................................................................
.
				Modules

Javascript modularity:


Modularity:
..........

In java Modularity , is presented via "Packages"

Package organize the code  logically.

Customer.java

package com.ibm.cms

public class Customer{}

Java organizes code folders and files Physically.

d:/javaapps/src/
    com/ibm/cms/Customer.java


What about javascript Modularity?

 Javascript is file based modularity physically
 but logically there is no such modularity at language level.

collection of variable declarations and function.

Once js started growing in large scale, dev struck to organize code.

2000, Smart developers started thinking about how to modualrize js code.
 

Module design patterns came.

1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd
4.ES 6 Module design pattern  = amd + cjs
------------------------------------------------------------
5.System = AMD = CJS + ES 6
6.UMD = NAMESPACE + AMD + CJS = ES 6
...........................................................................................
		 Typescript and ES 6 Module design patterns



How to share code?
  export , export default
How to link files
 import

export is used to share more code from the single file
export default is used to share only one code from the single file

code:
 variables
 functions
 classes/interfaces/enums

.................................................................................


After running inside browser:

Uncaught SyntaxError: Cannot use import statement outside a module

Why this error?
   The browser cant understand es 6 modules directly. 
   The browser has no facility to load and link files natively

How to run this?
  we need to use build tools, to pack our code into browser understandable format.


build tools

1.webpack

How to install webpack in our project?

Steps:

1.make sure that you have package.json file
 if not , create package.json file

npm init

2.install webpack
  npm install webpack webpack-cli --save-dev

3.add webpack.config.js in the project root dir

const path = require('path');

module.exports = {
  entry: './build/index.js',
  mode:'development',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
};

4.build /bundle your code
 open package.json
 add entry into scripts

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "webpack"
  }

5.start bundling
  open cmd and run the following command
npm run build

> es6-apps@1.0.0 build
> webpack

asset bundle.js 5.19 KiB [emitted] (name: main)
runtime modules 670 bytes 3 modules
cacheable modules 758 bytes
  ./src/index.js 146 bytes [built] [code generated]
  ./src/mylib.js 612 bytes [built] [code generated]
webpack 5.70.0 compiled successfully in 113 ms

6.add bundle file inside index.html
     <script src="dist/bundle.js"></script>


src/types/user.type.ts

//type class
export class User {
    id:number
    name:string
}


src/services/user.service.ts
import { User } from "../types/user.type"

export class UserService {
    constructor() {

    }
    findAll(): Array<User> {
        return [{ id: 1, name: 'a1' },{ id: 2, name: 'a2' },{ id: 3, name: 'a3' }]
    }

}
 
src/controllers/user.controller.ts
import { onInit } from "../core/controller.life";
import { UserService } from "../services/user.service";


export class UserController implements onInit {
    //di of userService
    constructor(private userService: UserService) { }

    init(): void {
       // console.log(this.userService.findAll())
       this.userService.findAll().forEach(user=>console.log(user))
    }

}

src/index.js
import { firstName, lastName } from './util/myuitl'
import { UserController } from './controllers/user.controler'
import { UserService } from './services/user.service'

console.log(`Name ${firstName} ${lastName}`)


function main() {
    const userCtrl = new UserController(new UserService())
    userCtrl.init()
}
main()



























