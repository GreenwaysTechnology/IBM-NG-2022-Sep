				HTTP Programming using Rxjs
.....................................................................................

Most of the front end applications need to communicate with a server over the HTTP protocal to download and upload data and access the back end services.

Angular provides a client HTTP APi called "HttpClient" built in service class.

HttpClient service class has been listed in the module "@angular/common/http"  HttpClientModule.

This has to be injected into the module where you need to interact with http service.

Steps:

1.server rest api
  -java
  -c#
  -python
  -php
  -node

Node based rest api

Install JSON Server

npm install -g json-server

E:\session\IBM\2022\sep\ng-session\restapiserver>

db.json
{
    "posts": [
        {
            "id": 1,
            "title": "json-server",
            "author": "typicode"
        }
    ],
    "users": [
        {
            "id": 1,
            "name": "Dr.Nice"
        },
        {
            "id": 2,
            "name": "Bombastor"
        },
        {
            "id": 3,
            "name": "RubberMan"
        },
        {
            "id": 4,
            "name": "Spider Man"
        },
        {
            "id": 5,
            "name": "Celeritas"
        },
        {
            "id": 6,
            "name": "Dynama"
        },
        {
            "id": 7,
            "name": "Dr.IQ"
        },
        {
            "id": 8,
            "name": "Magma"
        },
        {
            "id": 9,
            "name": "Iron Man"
        },
        {
            "id": 10,
            "name": "Subramanian"
        }
    ],
    "comments": [
        {
            "id": 1,
            "body": "some comment",
            "postId": 1
        }
    ],
    "profile": {
        "name": "typicode"
    }
}

start json server
json-server --watch db.json

2.angular client api

create user module
create user service
create user component
display user details from the backend.


Inject HttpClientModule
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UsersComponent } from './users.component';
import { HttpClientModule } from '@angular/common/http'



@NgModule({
  declarations: [
    UsersComponent
  ],
  imports: [
    CommonModule, HttpClientModule
  ],
  exports: [
    UsersComponent
  ]
})
export class UsersModule { }


export class User{
    id!:number
    name!:string
}
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http'
import { Observable } from 'rxjs'
import { User } from './user.type';

@Injectable({
  providedIn: 'root'
})
export class UsersService {
  url = "http://localhost:3000"
  constructor(private http: HttpClient) { }

  getUsers(): Observable<User[]> {
    return this.http.get<User[]>(`${this.url}/users`)
  }
}

import { Component, OnInit } from '@angular/core';
import { User } from './user.type';
import { UsersService } from './users.service';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styles: [
  ]
})
export class UsersComponent implements OnInit {

  users!:Array<User>
  constructor(private userService: UsersService) { }

  ngOnInit(): void {
    //console.log(this.userService.getUsers())
    this.userService.getUsers().subscribe({
      next: users => {
        console.log(users)
        this.users = users
      }
    })
  }

}
<div>
    <ul>
        <li *ngFor="let user of users">
            <span>{{user.id}} {{user.name}}</span>
        </li>
    </ul>
</div>
.....................................................................................
			How to handle HTTP errors
....................................................................................

instead of throwing error, we can convert into meanful response, so that app never crash.

catchError
  Catches errors on the observable to be handled by returning a new observable or throwing an error.


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http'
import { Observable, catchError, of } from 'rxjs'
import { User } from './user.type';

@Injectable({
  providedIn: 'root'
})
export class UsersService {
  url = "http://localhost:3000"
  constructor(private http: HttpClient) { }

  getUsers(): Observable<User[]> {
    return this.http.get<User[]>(`${this.url}/users`).pipe(
      //catchError and convert into proper response
      //catchError(err => of<User[]>([{ id: 0, name: 'test' }]))
      catchError(this.handleError<User[]>('getUsers', [{ id: 0, name: 'test' }]))
    )
  }
  //handle error Api
  private handleError<T>(operation = 'operation', result?: T) {
    //return function
    return (error: any): Observable<T> => {
      console.log(error)
      return of(result as T)
    }
  }

}
.....................................................................................
				Data Formating -Pipes
....................................................................................

What is pipe?
 pipe object used for data formating.

eg:
 show uppercase
 show money values - $,#,
 show date format  - 1/10/2021 , feb 10 2021...
 custom formates

Angular provides lot of built in pipes, you can write your own pipes as well.
....
Syntax:
  some data | nameof the pipe.

Pipe with Input :
  some data | nameof the pipe:input

Builtin pipes:

DatePipe: Formats a date value according to locale rules.

UpperCasePipe: Transforms text to all upper case.

LowerCasePipe: Transforms text to all lower case.

CurrencyPipe: Transforms a number to a currency string, formatted according to locale rules.

DecimalPipe: Transforms a number into a string with a decimal point, formatted according to locale rules.

PercentPipe: Transforms a number to a percentage string, formatted according to locale rules.

asyncPipe : to bind list of values async
   - used to bind observables directly.

............................
<div>
    <ul>
        <li *ngFor="let user of users">
            <!-- Pipe -->
            <!-- <span>{{user.id}} {{user.name | uppercase}}</span> -->
            <span>{{user.id}} {{user.name | titlecase}} {{user.date | date:'dd/MM/yyyy' }}</span>

        </li>
    </ul>
</div>
.....................................................................................
				Async pipe
.....................................................................................

without subscribe method how to bind data in ui.

async pipe works with observable directly.

import { Component, OnInit } from '@angular/core';
import { User } from './user.type';
import { Observable } from 'rxjs'
import { UsersService } from './users.service';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styles: [
  ]
})
export class UsersComponent implements OnInit {

  // users!:Array<User>
  users!: Observable<User[]>
  constructor(private userService: UsersService) { }


  ngOnInit(): void {
    //console.log(this.userService.getUsers())
    // this.userService.getUsers().subscribe({
    //   next: users => {
    //     console.log(users)
    //     this.users = users
    //   }
    // })
    this.users = this.userService.getUsers()

  }

}
<div>
    <ul>
        <!-- <li *ngFor="let user of users">
             <span>{{user.id}} {{user.name | titlecase}} {{user.date | date:'dd/MM/yyyy' }}</span> -->

        <!-- </li> -->
        <li *ngFor="let user of users |async">
            <span>{{user.id}} {{user.name | titlecase}} 
                {{user.date | date:'dd/MM/yyyy' }}</span>
        </li>
    </ul>
</div>
.....................................................................................
			  Custom Pipes
.....................................................................................
What if i need a pipe which is not part of angular lib...
  Custom Pipe.

Custom pipe object, need to be created inject into module.

import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'decimalFraction'
})
export class DecimalFractionPipe implements PipeTransform {

  transform(value: number, noofDigits: number = 1): string {
    return value.toFixed(noofDigits)
  }

}
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DecimalFractionPipe } from './decimal-fraction.pipe';



@NgModule({
  declarations: [
    DecimalFractionPipe
  ],
  imports: [
    CommonModule
  ],
  exports: [
    DecimalFractionPipe
  ],
  
})
export class UtilModule { }
...
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UsersComponent } from './users.component';
import { HttpClientModule } from '@angular/common/http'
import { UtilModule } from '../util/util.module';



@NgModule({
  declarations: [
    UsersComponent
  ],
  imports: [
    CommonModule, HttpClientModule,UtilModule
  ],
  exports: [
    UsersComponent
  ]
})
export class UsersModule { }
...
<div>
    <ul>
        <!-- <li *ngFor="let user of users">
             <span>{{user.id}} {{user.name | titlecase}} {{user.date | date:'dd/MM/yyyy' }}</span> -->

        <!-- </li> -->
        <li *ngFor="let user of users |async">
            <span>{{user.id}} -
                 {{user.name | titlecase}} -
                {{user.date | date:'dd/MM/yyyy' }} {{user.points | decimalFraction :3}}</span>
        </li>
    </ul>
</div>
.....................................................................................
			  Component Design principle
.....................................................................................

Component Responsiablity:

 1.Talk to the service layer and get data
 2.Bind the data and display those data

Having data fetching and ui in one component is not good idea, we need to isloate 

One Component only talking to the service layer and get data.

Another component is going to have only UI logic.

The component is going to talk to the service layer is called "Parent Component"
The component is going to have only ui logic is called "Child Component"

How to pass data from the parent to child?
  "Property Pattern" -  Props pattern

data is passed as prop from parent to child.

Steps:

1.Define Parent component - Users
2.Define Child Component - UsersList


Parent :
<div>
    <!-- Props pattern lefside is propName and right side is instance variable Name 
        any object can be passed as prop
    -->
   <app-userslist [users]="users" title="User Details" ></app-userslist>
</div>
import { Component, OnInit } from '@angular/core';
import { User } from './user.type';
import { Observable } from 'rxjs'
import { UsersService } from './users.service';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styles: [
  ]
})
export class UsersComponent implements OnInit {

  users!: Observable<User[]>
  constructor(private userService: UsersService) { }


  ngOnInit(): void {
    this.users = this.userService.getUsers()
  }

}

Child: UserList
<ul>
    <h1>{{title}}</h1>
    <li *ngFor="let user of users |async">
        <span>{{user.id}} -
             {{user.name | titlecase}} -
            {{user.date | date:'dd/MM/yyyy' }} {{user.points | decimalFraction :3}}</span>
    </li>
</ul>
import { Component, OnInit, Input } from '@angular/core';
import { User } from './user.type';
import { Observable } from 'rxjs'

@Component({
  selector: 'app-userslist',
  templateUrl: './userslist.component.html',
  styles: [
  ]
})
export class UserslistComponent implements OnInit {
  @Input()
  users!: Observable<User[]>
  @Input()
  title:string=''
  constructor() { }

  ngOnInit(): void {
  }

}
..................................................................................
				Angular Dev Tool 
..................................................................................

What if i want to see the component layout?/structure?
https://angular.io/guide/devtools
....................................................................................
			CSS in angular


Global CSS
  Third party css 
component level css
  
How to install ng-bootstrap?

npm install bootstrap 

angular.json
   "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],

....................................................................................
			     Event Handling
....................................................................................

How to implement event  handling?

Plain js:

<button onclick="listener()">Click</button>

In Angular , event handling is done using a symbol called ()

<button (NameoftheEvent)="listener()">Click</button>
<button (click)="listener()">Click</button>
.............................................			

eg:
<ul>
  <h1>{{title}}</h1>
 import { Component, OnInit, Input } from '@angular/core';
import { User } from './user.type';
import { Observable } from 'rxjs'

@Component({
  selector: 'app-userslist',
  templateUrl: './userslist.component.html',
  styles: [
  ]
})
export class UserslistComponent implements OnInit {
  @Input()
  users!: Observable<User[]>
  @Input()
  title: string = ''
  selectedUser!: User
  constructor() { }

  ngOnInit(): void {
  }
  //Event Listener
  onSelect(user: User) {
    console.log(user)
    this.selectedUser = user
  }

}
  <li *ngFor="let user of users |async">
    <span (click)="onSelect(user)">{{user.name | titlecase}}</span>
  </li>
</ul>
<br>
<div>
  <h3>{{selectedUser.id}} details</h3>
</div>

if you run this code, you will get error
main.ts:11 ERROR TypeError: Cannot read properties of undefined (reading 'id')
    at UserslistComponent_Template (userslist.component.html:14:7)
    at executeTemplate (core.mjs:12084:9)
    at refreshView (core.mjs:11969:13)
    at refreshComponent (core.mjs:13043:13)
    at refreshChildComponents (core.mjs:11759:9)
    at refreshView (core.mjs:12019:13)
    at refreshComponent (core.mjs:13043:13)
    at refreshChildComponents (core.mjs:11759:9)
    at refreshView (core.mjs:12019:13)
    at refreshComponent (core.mjs:13043:13)

The reason because, the selectedUser would be undefined during inital render, when u access selectUser.id would throw error.

How to fix this problem?

 Solution:
  we need to verify when that variable is having value(object reference) or not.

selectUser:User => undefined

Using if condition.

How to introduce if condition inside template?
.....................................................................................
			   Directives
.....................................................................................
.........
What is directive?
  Directive is custom element / attribute..

<app-root> ,<app-root [title]>


Types of Directives:
1.Template directive
2.Structural directive
3.Attribute directive

1.Template directive
   The directive with Template ; all components create template directive
  <app-root> ----------------template directive
  <app-profile>--------------template directive

All component's meta data is inherited from Directive meta.
Directive is parent , Component is child

Every component is directive.



2.Structural Directive
   It is type of directive, used to change HTML Layouts.
   They shape or reshape the DOM's "Structure" typically by adding,removing and manipulating
   the host elements to which they attached.
   
  -Host element means html elements eg div,span,li,table.
  -It is one of the "special attribute" directive
  -All structural directive starts with "*" notation.

*ngFor -  Structural Directive

Built in structural directives

1.*ngFor : for loop
2.*ngIf  : if condition
3.*ngSwitch : switch...case


List /Array rendering:
......................

Layouts:
1.List view Layout
   -ul li
2.Card View Layout
  div
3.Grid View Layout
  table tr td


1.for Loop: *ngFor

-where ever you want to repeate elements

element could be dom element or custom elements

eg:
 <anyelement *ngFor="condition">

 <div *ngFor="let variableName of arrayname">
       {{VariableName.property}}
 </div>
 This code will create more div elements

 <app-item-list *ngFor="">
Static view:
<ul>
        <li>1</li>
        <li>2</li>
        <li>3</li>

    </ul>

<div>
    <h1 style="text-align: center;">For loop</h1>

    <!--ul element-->
    <ul>
        <li *ngFor="let i of numbers">{{i}}</li>
    </ul>
    <!--Ui element for tod-->
    <ul class="list-group">
        <li class="list-group-item d-flex justify-content-between align-items-center" *ngFor="let todo of todos">
            <span class="badge badge-primary badge-pill"> {{todo.id}} </span> {{todo.title}}
        </li>

    </ul>
    <div class="card" *ngFor="let todo of todos">
        <h5 class="card-header">{{todo.id}}</h5>
        <div class="card-body">
            <h5 class="card-title">{{todo.userId}}</h5>
            <p class="card-text">{{todo.title}}</p>
            <a href="#" class="btn btn-primary">Update</a>
        </div>
    </div>
</div>

////////////////////////////////////////////////////////////////////////////////////////////

eg:
<div>
    <ul>
        <li *ngFor="let course of courses">
            {{course}}
        </li>
    </ul>
</div>
<h2>Users data</h2>
<div>
    <div *ngFor="let user of users">
        <h3>{{user.username}}</h3>
        <p>{{user.email}}</p>
        <address>
            <p>{{user.address.street}},{{user.address.city}}</p>
        </address>
    </div>
</div>
.....................................................................................
				  *ngIf

To implement if condition

<ul>
  <h1>{{title}}</h1>
  <!-- <li *ngFor="let user of users |async">
        <span>{{user.id}} -
             {{user.name | titlecase}} -
            {{user.date | date:'dd/MM/yyyy' }} {{user.points | decimalFraction :3}}</span>
    </li> -->
  <li *ngFor="let user of users |async">
    <span (click)="onSelect(user)">{{user.name | titlecase}}</span>
  </li>
</ul>
<br>
<div *ngIf="selectedUser">
  <h3>{{selectedUser.id}} details</h3>
  <h4>Name : {{selectedUser.name | titlecase}}</h4>
  <h4>Date : {{selectedUser.date | date}}</h4>
  <h4>Points :{{selectedUser.points | decimalFraction}}</h4>
</div>
....................................................................................
				Spinner Implementation
.....................................................................................

Parent Compoent:
import { Component, OnInit } from '@angular/core';
import { User } from './user.type';
import { Observable } from 'rxjs'
import { UsersService } from './users.service';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  // styles: [`
  //   h1 {
  //     color:'blue'
  //   }`
  // ]
  styleUrls: ['user.component.css']
})
export class UsersComponent implements OnInit {

  // users!:Array<User>
  users!: Observable<User[]>

  loading: boolean = true;
  status: string = "loading....."

  constructor(private userService: UsersService) { }


  ngOnInit(): void {
    //todo: remove this once if you test the code
    setTimeout(()=>{
      this.users = this.userService.getUsers()
      this.loading = !this.loading;
    },5000)
    

  }

}

<div class="container">
    <!-- Props pattern lefside is propName and right side is instance variable Name 
        any object can be passed as prop
    -->
   <app-userslist [users]="users" 
    title="User Details" 
    [loading]="loading" 
    [status]="status" ></app-userslist>
</div>

Child Component:
import { Component, OnInit, Input } from '@angular/core';
import { User } from './user.type';
import { Observable } from 'rxjs'

@Component({
  selector: 'app-userslist',
  templateUrl: './userslist.component.html',
  styles: [
  ]
})
export class UserslistComponent implements OnInit {
  @Input()
  users!: Observable<User[]>
  @Input()
  title: string = ''
  selectedUser!: User

  @Input()
  status!:string
  @Input()
  loading!:boolean
  constructor() { }

  ngOnInit(): void {
  }
  //Event Listener
  onSelect(user: User) {
    console.log(user)
    this.selectedUser = user
  }

}
...
<div *ngIf="loading; else notloading  ">
  <h2>{{status}}</h2>
</div>
<ng-template #notloading>
  <ul>
    <h1>{{title}}</h1>
    <li *ngFor="let user of users |async">
      <span (click)="onSelect(user)">{{user.name | titlecase}}</span>
    </li>
  </ul>
  <br>
  <div *ngIf="selectedUser">
    <h3>{{selectedUser.id}} details</h3>
    <h4>Name : {{selectedUser.name | titlecase}}</h4>
    <h4>Date : {{selectedUser.date | date}}</h4>
    <h4>Points :{{selectedUser.points | decimalFraction}}</h4>
  </div>
</ng-template>
.....................................................................................
				Dynamic CSS
....................................................................................

Adding and removing css classes during time -  Class Binding.

[classtobeadded]="condition"


styles.css
/* You can add global styles to this file, and also import other style files */
* {
    font-family: Arial, Helvetica, sans-serif;
}

h1 {
    color: #264D73
}
body {
    padding: 5rem;
    background-color: azure;
}
.selected {
    background-color: black;
    color: white;
}

....
<div *ngIf="loading; else notloading  ">
  <h2>{{status}}</h2>
</div>
<ng-template #notloading>
  <ul>
    <h1>{{title}}</h1>
    <li *ngFor="let user of users |async">
      <span [class.selected]="user===selectedUser" (click)="onSelect(user)">{{user.name | titlecase}}</span>
    </li>
  </ul>
  <br>
  <!-- Task for you : break this code into a separate Component: -->
  <!-- <app-selecteduser [selectedUser]="selectUser"></app-selecteduser> -->
  <div *ngIf="selectedUser">
    <h3>{{selectedUser.id}} details</h3>
    <h4>Name : {{selectedUser.name | titlecase}}</h4>
    <h4>Date : {{selectedUser.date | date}}</h4>
    <h4>Points :{{selectedUser.points | decimalFraction}}</h4>
  </div>
</ng-template>
....................................................................................
			  Event Emitter Pattern
			     (Custom Events)
.....................................................................................


if you want to send  data from child to service, you should not send directly rather we have to send to Parent , parent will send data to Service.


Steps:

1.Child Component

1.We need to create EventEmitter object

  @Output()
  onSendRequest = new EventEmitter<User>();

 here 
  onSendRequest is Name of the Event- Custom Event
  EventEmitter is Object used to broadcast/send data to the Parent 
  @Output is used to send data to the Parent where ever the event attached.

import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { User } from './user.type';
import { Observable } from 'rxjs'

@Component({
  selector: 'app-userslist',
  templateUrl: './userslist.component.html',
  styles: [
  ]
})
export class UserslistComponent implements OnInit {
  @Input()
  users!: Observable<User[]>
  @Input()
  title: string = ''
  selectedUser!: User

  @Input()
  status!: string
  @Input()
  loading!: boolean

  //Event Emitter Object
  @Output()
  onSendRequest = new EventEmitter<User>();

  constructor() { }

  ngOnInit(): void {
  }
  //Event Listener
  onSelect(user: User) {
    console.log(user)
    this.selectedUser = user
  }
  //send data to the parent component
  sendUser() {
    let user:User = {
      id: Math.random(),
      name: 'foo',
      date: new Date(),
      points: 9888.8777
    }
    this.onSendRequest.emit(user)
  }

}

Step 2:Parent Component - We listen for event called "onSendRequest"

Note: $event is global reference variable which holds current DOM object's Event Object.

<div class="container">
    <h1>User Page</h1>
    <!-- Props pattern lefside is propName and right side is instance variable Name 
        any object can be passed as prop
    -->
   <app-userslist [users]="users" 
    title="User Details" 
    [loading]="loading" 
    [status]="status"  (onSendRequest)="getUser($event)"  ></app-userslist>
    <h4>{{message}}</h4>

</div>

import { Component, OnInit } from '@angular/core';
import { User } from './user.type';
import { Observable } from 'rxjs'
import { UsersService } from './users.service';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  // styles: [`
  //   h1 {
  //     color:'blue'
  //   }`
  // ]
  styleUrls: ['user.component.css']
})
export class UsersComponent implements OnInit {

  // users!:Array<User>
  users!: Observable<User[]>

  loading: boolean = true;
  status: string = "loading....."

  user!: User

  message: string = ""

  constructor(private userService: UsersService) { }


  ngOnInit(): void {
    //console.log(this.userService.getUsers())
    // this.userService.getUsers().subscribe({
    //   next: users => {
    //     console.log(users)
    //     this.users = users
    //   }
    // })
    //todo: remove this once if you test the code
    // setTimeout(() => {
    //   this.users = this.userService.getUsers()
    //   this.loading = !this.loading;
    // }, 5000)
    this.users = this.userService.getUsers()
    this.loading = !this.loading;
  }
  getUser(user: User) {
    console.log('Parent  ', user)
    this.userService.save(user).subscribe({
      next: user => {
        this.message = 'successfully added'
      },
      error: err => {
        console.log('User not added', err)
      }
    })
  }
}

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http'
import { Observable, catchError, of } from 'rxjs'
import { User } from './user.type';

@Injectable({
  providedIn: 'root'
})
export class UsersService {
  url = "http://localhost:3000"
  constructor(private http: HttpClient) { }

  getUsers(): Observable<User[]> {
    return this.http.get<User[]>(`${this.url}/users`).pipe(
      //catchError and convert into proper response
      //catchError(err => of<User[]>([{ id: 0, name: 'test' }]))
      catchError(this.handleError<User[]>('getUsers', [{ id: 0, name: 'test' }]))
    )
  }
  save(user: User):Observable<User> {
    console.log('user posted in sevice layer', user)
    return this.http.post<User>(`${this.url}/users`, user).pipe(
      catchError(this.handleError<User>('Save is Called'))
    )
  }

  //handle error Api
  private handleError<T>(operation = 'operation', result?: T) {
    //return function
    return (error: any): Observable<T> => {
      console.log(error)
      return of(result as T)
    }
  }

}
...................................................................................
				  Forms
..............................................................................................

Forms are used to get input from the User.

Types of Forms

1.Template driven Forms -  Using HTML
2.Reactive forms -  Via coding

Template Driven forms:
.......................

Tempate Driven Forms:
...................

Step: 1

 Where ever you want Forms, YOu need to injects FormsModule

import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule
  ],
  providers: [],

})
export class UserModule { }			



Step 2 : declare model class to caputure form fields


export class UserModel {
    constructor(public id:number,public name: string, public date:Date, public points: number) { }
}

Step 3 : create model object and populate default data if you want
 //create Model object
  user: UserModel = new UserModel(Math.random(), "", new Date(), 0.0)
  <div class="container">
    <h3>User Form</h3>
    <form>
      <div class="form-group">
        <label for="name">Name</label>
        <input type="text" class="form-control" id="name" required>
      </div>

      <div class="form-group">
        <label for="points">points</label>
        <input type="number" class="form-control" id="points" required>
      </div>

      <button type="submit" class="btn btn-success">Submit</button>

    </form>
  </div>
</div>

Step 4: Data binding
  Binding model object with Form

Data binding
   Binding textbox(form controls) with Model Object
   We have many ways
  1.through instance variable,$event
  2.through [(ngModel)]="post.title"
   ngModel = > it is an object from "FormsModule"
   ngModel it is dto object=>data transfering between view and component.

Two way data binding:
    Transerfing data between UI and controller and controller and UI
[(ngModel)] -BANNA in a box notation.


//
Form Control value property is bound with name property of input control.

<div class="container">
    <h3>User Form</h3>
    <form>
      <div class="form-group">
        <label for="name">Name</label>
        <input [(ngModel)]="user.name" name="name" type="text" class="form-control" id="name" required>
      </div>

      <div class="form-group">
        <label for="points">points</label>
        <input [(ngModel)]="user.points" name="points" type="number"  class="form-control" id="points" required>
      </div>

      <button type="submit" class="btn btn-success">Submit</button>

    </form>
  </div>

Note: 
 name property must be there , other wise you will get error.

We can introduce one pipe, only for development, once the form dev is over, we can remove- to watch property property changes.

template Reference variable:

 if want to access dom element inside component and within template
  -$event - within component
  -#variable - across the template/with in template

<div #mydiv>

  mydiv is just variable which points "Div" Object

<div #mydiv>
  Hello
</div>

<div>
   {{mydiv.innerHTML}}
</div>
*****************************************************************************************
					Vaildation
///////////////////////////////////////////////////////////////////////////////////////////

Objects In the FormsModule:

NgForm : 

 It is object representation of "form" element.
 Can be used to control form validations.
 in order to access the NgForm object inside template. You have to use template reference

<form #postForm> =>postForm points HTMLForm Object

ngForm is Object which inherits HTMLForm

class ngForm extends HTMLForm{
  +extra behavior=>Ready made validation code
  +form submission behviours
}

What is meaning of this code <form #postForm>?

 HTMLFORMMobject ----postForm

dummy code for the above template
 let postForm =  new HTMLForm();

what we need
 let postForm = new NgForm()

<form #postForm="ngForm"> 


The variable postForm is now a reference to the NgForm 
directive that governs the form as a whole.

The NgForm directive:
....................

What NgForm directive? You didn't add an NgForm directive before.

Angular did. Angular automatically creates and attaches
 an NgForm directive to the <form> tag.

"The NgForm directive supplements the form element with additional features. 

It holds the controls you created for the elements  with an "ngModel directive" and name attribute, and monitors their properties, including their validity.
 
It also has its own valid property which is true only if every contained control is valid."

Note: NgForm is built Object ,has more logic for simlifying our form handling process.

********************************************************************************************
********************************************************************************************
NgModel :

 1.Transfering data between UI and Controller .

NgModel not only for data transfer, which does so many other things beyond two way data binding.

Track control(form element) state and validity with ngModel:
............................................................

Form element states:

Angular provides built-in css classes to track form control state"

State 	                         Class if true 	  Class if false

The control has been visited.  	  ng-touched 	    ng-untouched
The control's value has changed.  ng-dirty 	    ng-pristine
The control's value is valid. 	  ng-valid 	    ng-invalid

State Tracking Steps:

1.Look but don't touch.
2.Click inside the name box, then click outside it.
3.Add slashes to the end of the name.
4.Erase the name.

ng-untouched - if you dont touch
ng-touched - if you touch
ng-dirty - if you changed
ng-invalid - if you remove all-empty field

Step 6:

Add custom CSS for visual feedback:

Valid + Required - green Color
Valid + optional - white color
Invalid (required | optional) - red Color

Angular Css:

.ng-valid[required], .ng-valid.required  {
  border-left: 5px solid #42A948; /* green */
}

.ng-invalid:not(form)  {
  border-left: 5px solid #a94442; /* red */
}

****************************************************************************************

Adding validation block to our code:
...................................

NgModel is Child Object of FormControl Object

class  Input{
 
}
class NgModel extends Input{
  //extra features : state tracking,enabling validation.
}

<input #Xx> -Here xxPoints only Input

<input #Xx="ngModel"> -Here xx points ngModel

      <input  [(ngModel)]="post.title" #errorMsg1="ngModel" name="title" type="text" class="form-control" id="title" required>

Step 7: Add Error Block
<div class="container">
  <h1>Post Form</h1>
  <form #postForm="ngForm">
    <!--TODO: Remove this once testing over-->
    <pre>{{post | json}}</pre>
    <div class="form-group">
      <label for="title">Title</label>
      <input [(ngModel)]="post.title" #errorMsg1="ngModel" name="title" type="text" class="form-control" id="title"
        required>
      <div [hidden]="errorMsg1.valid || errorMsg1.pristine" class="alert alert-danger">
        title is required
      </div>
    </div>

    <div class="form-group">
      <label for="name">Name</label>
      <input [(ngModel)]="post.author" #errorMsg2="ngModel" name="author" type="text" class="form-control" id="name"
        required>
      <div [hidden]="errorMsg2.valid || errorMsg2.pristine" class="alert alert-danger">
        Author is required
      </div>
    </div>
    <button type="submit" class="btn btn-success">Submit</button>

  </form>
</div>

Step 7: Disabling submit button until the whole form is valid.
*******************************************************************************************

Disabling submit button in case any validation fails:

  <button type="submit" class="btn btn-success" [disabled]="!postForm.form.valid">Submit</button>

*******************************************************************************************


Step 8:Adding combo box: Select Control


export class PostFormModel {
    constructor(public id: number, public title: string, public author: string, public category: string) {
    }
}
export class AppComponent {
  post: any;
  //you may get  this from services
  categories: Array<string> = ["User interface", "MicroServices", "Devops"];
  constructor() {
    this.post = new PostFormModel(Math.random(), 'Learn Angular', 'Misko', this.categories[0])
  }
}

    <div class="form-group">
      <label for="category">Category</label>
      <select class="form-control" id="category" name="category" 
       [(ngModel)]="post.category">
        <option *ngFor="let cat of categories"  [value]="cat">
          {{cat}}
        </option>
      </select>
    </div>
////////////////////////////////////////////////////////////////////////////////////////////

Step 9: How to submit Form? and show another page

Add listener in the form tag.
 <form #postForm="ngForm" (ngSubmit)="onSubmit()">


<div class="container">
  <h1>Post Form</h1>
  <div [hidden]="submitted">
    <form #postForm="ngForm" (ngSubmit)="onSubmit()">
      <!--TODO: Remove this once testing over-->
      <pre>{{post | json}}</pre>
      <div class="form-group">
        <label for="title">Title</label>
        <input [(ngModel)]="post.title" #errorMsg1="ngModel" name="title" type="text" class="form-control" id="title"
          required>
        <div [hidden]="errorMsg1.valid || errorMsg1.pristine" class="alert alert-danger">
          title is required
        </div>
      </div>

      <div class="form-group">
        <label for="name">Name</label>
        <input [(ngModel)]="post.author" #errorMsg2="ngModel" name="author" type="text" class="form-control" id="name"
          required>
        <div [hidden]="errorMsg2.valid || errorMsg2.pristine" class="alert alert-danger">
          Author is required
        </div>
      </div>

      <div class="form-group">
        <label for="category">Category</label>
        <select class="form-control" id="category" name="category" [(ngModel)]="post.category">
          <option *ngFor="let cat of categories" [value]="cat">
            {{cat}}
          </option>
        </select>
      </div>


      <button type="submit" class="btn btn-success" [disabled]="!postForm.form.valid">Submit</button>
    </form>
  </div>

  <!--Details Page-->
  <div class="container" [hidden]="!submitted">
    <h2>You submitted the following:</h2>
    <div class="row">
      <div class="col-xs-3">Id : </div>
      <div class="col-xs-9  pull-left">{{ post.id }}</div>
    </div>
    <div class="row">
      <div class="col-xs-3">Title : </div>
      <div class="col-xs-9  pull-left">{{ post.title }}</div>
    </div>
    <div class="row">
      <div class="col-xs-3">Author : </div>
      <div class="col-xs-9 pull-left">{{ post.author }}</div>
    </div>
    <div class="row">
      <div class="col-xs-3">Category : </div>
      <div class="col-xs-9 pull-left">{{ post.category }}</div>
    </div>
    <br>
    <button class="btn btn-primary" (click)="submitted=false">GoBack</button>
  </div>

</div>

import { Component } from '@angular/core';
import { PostFormModel } from './post.form.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  post: any;
  submitted: boolean = false;
  //you may get  this from services
  categories: Array<string> = ["User interface", "MicroServices", "Devops"];
  constructor() {
    this.post = new PostFormModel(Math.random(), 'Learn Angular', 'Misko', this.categories[0])
  }
  onSubmit(){
     alert(JSON.stringify(this.post))
     this.submitted = true;
  }
}


export class PostFormModel {
    constructor(public id: number, public title: string, public author: string, public category: string) {
    }
}
.............................................................................................


<div class="container">
  <h1>Forms</h1>
  <!-- Todo: remove this in production -->
  <!-- {{model | json}} -->

  <!-- Validation information is avaiable in NgFormDirect -->
  <!-- heroForm is just reference variable , stores NgForm Object, which is used for validation -->

  <div [hidden]="submitted" >
    <form #heroForm="ngForm" (ngSubmit)="onSubmit()">
      <div class="form-group">
        <label for="name">Name</label>
        <!-- ngModel is used for data binding and helps to enable validation -->
        <input type="text" [(ngModel)]="model.name" #errorMsg1="ngModel" name="name" class="form-control" id="name"
          required>
        <div [hidden]="errorMsg1.valid || errorMsg1.pristine" class="alert alert-danger"> Name is Required </div>

        <div class="form-group">
          <label for="alterEgo">AlterEgo</label>
          <input type="text" [(ngModel)]="model.alterEgo" name="alterEgo" class="form-control" id="alterEgo"
            #errorMsg2="ngModel" required>
          <div [hidden]="errorMsg2.valid || errorMsg2.pristine" class="alert alert-danger"> Ego is Required </div>
        </div>

        <div class="form-group">
          <label for="power">Hero Power</label>
          <select [(ngModel)]="model.power" name="power" class="form-control" id="power" required>
            <option *ngFor="let pow of powers" [value]="pow">{{pow}}</option>
          </select>
        </div>
      </div>
      <button type="submit" class="btn btn-success" [disabled]="!heroForm.form.valid">Submit</button>
    </form>
  </div>
  <div [hidden]="!submitted">
    <h2>You submitted the following:</h2>
    <div class="row">
      <div class="col-xs-3">Name</div>
      <div class="col-xs-9">{{ model.name }}</div>
    </div>
    <div class="row">
      <div class="col-xs-3">Alter Ego</div>
      <div class="col-xs-9">{{ model.alterEgo }}</div>
    </div>
    <div class="row">
      <div class="col-xs-3">Power</div>
      <div class="col-xs-9">{{ model.power }}</div>
    </div>
    <br>
    <button type="button" class="btn btn-primary" (click)="submitted=false">Edit</button>
  </div>

import { Component } from '@angular/core';
import { Hero } from './hero.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  //create model object with default values
  powers = ['Really Smart', 'Super Flexible',
    'Super Hot', 'Weather Changer'];

  model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');
  submitted = false;

  //onSubmit listener
  onSubmit() {
    console.log(this.model)
    this.submitted = true
  }
}
/* You can add global styles to this file, and also import other style files */

/* Form validation classes provided by angular */
.ng-valid[required],
.ng-valid.required {
    border-left: 5px solid #42A948;
    /* green */
}

.ng-invalid:not(form) {
    border-left: 5px solid #a94442;
    /* red */
}
.............................................................................................









































